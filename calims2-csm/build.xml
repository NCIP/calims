<project name="calims2-csm" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<property name="local.target.dir" value="${basedir}/target" />
	<property name="classes.dir" value="${local.target.dir}/classes" />
	<property name="src.dir" value="${basedir}/src/java"/>
	<property name="unit-test.dir" value="${basedir}/test/unit"/>

	<target name="ivy-settings" description="Uses global Ivy settings file for things such as resolver chains, common properties, etc. ">
		<echo message="location of ivy settings for ${ant.project.name} : ${ivy.settings.location}" />
		<ivy:settings file="${ivy.settings.location}" />
	</target>

	<target name="pre-clean" description="Deletes subproject's classes and other target directories which should not exist before starting the build ">
		<delete dir="${local.target.dir}" />
	</target>

	<target name="init" depends="pre-clean" description="Creates subproject's local transient directories ">
		<mkdir dir="${classes.dir}"/>
	</target>

	<target name="compile" depends="init, ivy-settings" description="description">
		<!--   FIXME-->
		<ivy:retrieve conf="compile" sync="true" />
		<javac srcdir="${src.dir}" destdir="${classes.dir}" source="1.6" target="1.6" debug="true">
			<classpath>
			  <fileset dir="${basedir}/lib" includes="*.jar" />		
			  <fileset dir="${dist.dir}/../calims2-api" includes="calims*.jar" />
			  <fileset dir="${dist.dir}/../calims2-model" includes="calims*.jar" />
			</classpath>
		</javac>
		
	</target>

	<target name="dist" depends="compile" description="description">
		<jar destfile="${dist.dir}/${ant.project.name}.jar" basedir="${classes.dir}" />
	</target>

	<target name="test" depends="dist" description="Run the unit test and generate the report">
		<ivy:retrieve conf="test" sync="true"/>

		<cobertura-instrument datafile="${local.target.dir}/cobertura.ser" todir="${local.target.dir}/instrumented-classes">
			<fileset dir="${classes.dir}">
				<include name="**/*.class"/>
			</fileset>
		</cobertura-instrument>

		<javac srcdir="${unit-test.dir}/java" destdir="${classes.dir}" source="1.6" target="1.6" debug="true">
			<classpath>
				<fileset dir="${basedir}/lib" includes="*.jar" />
			  <fileset dir="${dist.dir}/../calims2-api" includes="calims2*.jar" />
			  <fileset dir="${dist.dir}/../calims2-model" includes="calims2*.jar" />
			</classpath>
		</javac>

		<junit showoutput="true" printsummary="yes" haltonfailure="no" errorProperty="test.error" failureProperty="test.failed" fork="yes" forkmode="perBatch">
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${local.target.dir}/cobertura.ser" />
			<classpath>
				<fileset dir="${target.dir}/lib/test-cobertura">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${basedir}/lib">
					<include name="**/*.jar" />
				</fileset>
			  <fileset dir="${dist.dir}/../calims2-api" includes="calims*.jar" />
        <fileset dir="${dist.dir}/../calims2-model" includes="calims*.jar" />
				<pathelement location="${local.target.dir}/instrumented-classes" />
				<pathelement location="${classes.dir}" />
				<pathelement location="${unit-test.dir}/resources" />
			</classpath>

			<batchtest todir="${unit-test.report.dir}/junit">
				<formatter type="xml" />
				<fileset dir="${classes.dir}" includes="**/*Test.class" />
			</batchtest>
		</junit>

		<if>
			<or>
				<isset property="test.failed" />
				<isset property="test.error"/>
			</or>
			<then>
				<propertyfile file="${unit-test.report.dir}/junit/result.properties">
					<entry key="${ant.project.name}.junit.failed" value="true" />
				</propertyfile>
			</then>
		</if>
	</target>

	<target name="checkstyle" description="Generates a report of code convention violations.">
		<checkstyle config="${common.dir}/checkstyle/MoxieCheckstyle.xml" failOnViolation="false">
			<fileset dir="${src.dir}" includes="**/*.java"/>
			<fileset dir="${unit-test.dir}/java" includes="**/*.java"/>
			<fileset dir="${local.target.dir}" includes="**/*.class"/>
			<formatter type="plain"/>
			<formatter type="xml" toFile="${checkstyle-test.report.dir}/${ant.project.name}_checkstyle_errors.xml"/>
		</checkstyle>
		<xslt taskname="checkstyle"
	      in="${checkstyle-test.report.dir}/${ant.project.name}_checkstyle_errors.xml"
	      out="${checkstyle-test.report.dir}/${ant.project.name}-CheckstyleReport.html"
	      style="${common.dir}/checkstyle/checkstyle-simple.xsl" />
	</target>
	
	<target name="pmd">
		<pmd shortFilenames="true">
			<ruleset>rulesets/favorites.xml</ruleset>
			<formatter type="html" toFile="${pmd-test.report.dir}/${ant.project.name}-PMDReport.html" linkPrefix="http://pmd.sourceforge.net/xref/"/>
			<fileset dir="${src.dir}" includes="**/*.java"/>
			<fileset dir="${unit-test.dir}/java" includes="**/*.java"/>
		</pmd>
	</target>
</project>
